#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// Estrutura para representar uma peça do Tetris
typedef struct Peca {
    int forma[4][4];
    int x, y;
} Peca;

// Estrutura para representar o tabuleiro do Tetris
typedef struct Tabuleiro {
    int matriz[20][10];
} Tabuleiro;

// Função para criar uma peça aleatória
Peca criarPeca() {
    Peca peca;
    int forma = rand() % 7; // 7 formas de peças no Tetris
    switch (forma) {
        case 0: // I
            peca.forma[0][0] = 1; peca.forma[0][1] = 1; peca.forma[0][2] = 1; peca.forma[0][3] = 1;
            break;
        case 1: // J
            peca.forma[0][0] = 1; peca.forma[1][0] = 1; peca.forma[1][1] = 1; peca.forma[1][2] = 1;
            break;
        // ...
    }
    peca.x = 5; peca.y = 0;
    return peca;
}

// Função para rotacionar uma peça
void rotacionarPeca(Peca* peca) {
    int temp[4][4];
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            temp[j][3-i] = peca->forma[i][j];
        }
    }
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            peca->forma[i][j] = temp[i][j];
        }
    }
}

// Função para verificar se uma peça pode ser posicionada
int podePosicionar(Tabuleiro* tabuleiro, Peca* peca, int x, int y) {
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            if (peca->forma[i][j] == 1 && tabuleiro->matriz[y+i][x+j] == 1) {
                return 0;
            }
        }
    }
    return 1;
}

// Função para posicionar uma peça no tabuleiro
void posicionarPeca(Tabuleiro* tabuleiro, Peca* peca, int x, int y) {
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            if (peca->forma[i][j] == 1) {
                tabuleiro->matriz[y+i][x+j] = 1;
            }
        }
    }
}

int main() {
    srand(time(NULL));
    Tabuleiro tabuleiro;
    for (int i = 0; i < 20; i++) {
        for (int j = 0; j < 10; j++) {
            tabuleiro.matriz[i][j] = 0;
        }
    }
    Peca peca = criarPeca();
    while (1) {
        // Desenhar o tabuleiro e a peça
        // ...
        // Verificar se a peça pode ser posicionada
        if (podePosicionar(&tabuleiro, &peca, peca.x, peca.y)) {
            posicionarPeca(&tabuleiro, &peca, peca.x, peca.y);
        } else {
            // Game over
            break;
        }
        // Verificar se há linhas completas
        // ...
    }
    return 0;
}
